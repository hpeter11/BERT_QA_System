{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ltpbcm9393_ZK96Glbr1RrMxFaq0vOc0","timestamp":1733355647565}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install datasets==2.10.1\n","#load_dataset sometimes hangs on a higher version\n","!pip install transformers"],"metadata":{"id":"9yRIhS6lOTYX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 1. Load Data"],"metadata":{"id":"wFqCtBgZNdUU"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IWQ-lbbiNgDB","executionInfo":{"status":"ok","timestamp":1733426441570,"user_tz":300,"elapsed":17665,"user":{"displayName":"Scott Petersen","userId":"03103136233340310089"}},"outputId":"5a51f853-eb40-4f64-b9c3-b552ba1a04be"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["data_path = \"\""],"metadata":{"id":"pA8kH770NyUj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 2. Connect to Github"],"metadata":{"id":"0SaRvDbJNFGU"}},{"cell_type":"code","source":["!git config --global user.name \"hpeter11\"\n","!git config --global user.email \"hilton_petersen@brown.edu\""],"metadata":{"id":"5C-4mOYrNIZP","executionInfo":{"status":"ok","timestamp":1733425768957,"user_tz":300,"elapsed":311,"user":{"displayName":"Scott Petersen","userId":"03103136233340310089"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["!git clone https://github.com/hpeter11/BERT_QA_System.git"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fLxzRmHLOa0h","executionInfo":{"status":"ok","timestamp":1733425773306,"user_tz":300,"elapsed":1384,"user":{"displayName":"Scott Petersen","userId":"03103136233340310089"}},"outputId":"2cf66b36-88e4-4767-9381-0ac44ccf2a0c"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'BERT_QA_System'...\n","remote: Enumerating objects: 3, done.\u001b[K\n","remote: Counting objects: 100% (3/3), done.\u001b[K\n","remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\u001b[K\n","Receiving objects: 100% (3/3), done.\n"]}]},{"cell_type":"code","source":["!ls -l /content"],"metadata":{"id":"qFWnZLQzRhLe","executionInfo":{"status":"ok","timestamp":1733426551381,"user_tz":300,"elapsed":240,"user":{"displayName":"Scott Petersen","userId":"03103136233340310089"}},"outputId":"63cd1e62-d8a0-46ec-b721-5669b0f065fb","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["total 8\n","drwx------ 7 root root 4096 Dec  5 19:20 drive\n","drwxr-xr-x 1 root root 4096 Dec  4 14:23 sample_data\n"]}]},{"cell_type":"code","source":["!mv /content/drive/MyDrive/BERT_QA /content/BERT_QA_System/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j0avcrS1PBSM","executionInfo":{"status":"ok","timestamp":1733426482000,"user_tz":300,"elapsed":191,"user":{"displayName":"Scott Petersen","userId":"03103136233340310089"}},"outputId":"e051a489-4cca-4959-a3aa-cdc1cddcb732"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["mv: cannot create regular file '/content/BERT_QA_System/': Not a directory\n"]}]},{"cell_type":"code","source":["%cd /content/BERT_QA_System/"],"metadata":{"id":"oCb2YVx6OrIy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Preprocessing"],"metadata":{"id":"JifsBqXxmtqm"}},{"cell_type":"code","source":["from datasets import load_dataset\n","\n","import torch\n","import numpy as np\n","import random\n","\n","# we set up some seeds so that we can reproduce results\n","seed = 123\n","torch.manual_seed(seed)\n","torch.cuda.manual_seed(seed)\n","torch.cuda.manual_seed_all(seed)\n","\n","np.random.seed(seed)\n","random.seed(seed)\n","torch.backends.cudnn.benchmark = False\n","torch.backends.cudnn.deterministic = True\n"],"metadata":{"id":"OjX3Y-kCzdpE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\"\"\"\n","Some options for BERT model that can be run in colab:\n","\n","\"distilbert-base-uncased\",\n","\"distilbert-base-uncased-distilled-squad\",\n","\"distilbert-base-cased\",\n","\"distilbert-base-cased-distilled-squad\",\n","\n","\"\"\""],"metadata":{"id":"gJOgVaQtwRgj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Change train.json / dev.json to the appropriate filepaths =====\n","data_files = {\"train\": \"train.json\", \"dev\": \"dev.json\"}\n","dataset = load_dataset('json', data_files=data_files)"],"metadata":{"id":"eMoGcjRgMk1E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def main():\n","  '''Here's the basic structure of the main block -- feel free to add or\n","  remove parameters/helper functions as you see fit, but all steps here are\n","  needed and we expect to see precision, recall, and f1 scores printed out'''\n","  device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","  batch_size = 64\n","\n","  model, tokenizer = load_model()\n","  train, validation = load_data()\n","\n","  train_data_loader = preprocess_and_tokenize(train)\n","  validation_data_loader = preprocess_and_tokenize(validation)\n","\n","  train_losses, val_losses = train_loop(train_data_loader, validation_data_loader)\n","  precision, recall, f1_score  = eval_loop(validation_data_loader)\n","\n","  print(\"PRECISION: \", precision)\n","  print(\"RECALL: \", recall)\n","  print(\"F1-SCORE: \", f1_score)\n","\n","if __name__ == \"__main__\":\n","  main()"],"metadata":{"id":"KS9ZcP-umJLN"},"execution_count":null,"outputs":[]}]}